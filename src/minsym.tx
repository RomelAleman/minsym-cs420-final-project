Program: statements*=ProgramStatement;

ProgramStatement: MainStatement | CreateFunctionStatement | CreateClassStatement | CallFunction | IgnoreStatement;

CreateFunctionStatement:
    'function' name=ID 'returns' return_type=Type 'with' parameters=Parameter
        (inner_function_statements*=InnerFunctionStatement)
    'end function'
;

CreateClassStatement:
    'define' name=ID ('which inherits from' parent_name=ID)? 'as' parameters=Parameter 
        inner_class_statements*=CreateMethodStatement
    'end define'
;

MainStatement:
  AddToListStatement | IterateStatement | PrintStatement | AssignmentStatement | WhileStatement | ForStatement | IfStatement | CallFunction | CreateObjectStatement | AccessClassObject 
;

AddToListStatement:
    'add' '(' list_items=Item ')' 'to list' name=ID 
;

IgnoreStatement:
   'ignore' 
    content=PossibleIgnoreStatement
    'end ignore'
;

PossibleIgnoreStatement:
    /(.|\n)*?(?=end ignore)/
;

PrintStatement:
    'print' val=Expression ('and' val=Expression)* 
;

ForStatement:
    'for' var=ID 'from' start=FromMaxeme 'to' end=FromMaxeme
        inner_for_statements*=InnerFunctionStatement
    'end for'
;   

FromMaxeme:
    VarRef | ObjectAttrRef | AttrRef | NUMBER
;

WhileStatement:
    'while' condition=Conditional
        inner_while_statements*=MainStatement
    'end while'
;

AssignmentStatement:
    'assign' val=Expression 'to' var=Identifier
;

CallFunction:
    'function' name=ID 'with' args=Argument
;

IterateStatement:
    'iterate' var=IterateVar 'by' multiple=NUMBER
;

IterateVar:
    VarRef | AttrRef | ObjectAttrRef
;

InnerFunctionStatement:
    ReturnStatement | MainStatement
;

CreateObjectStatement:
    object_name=ID 'is' class_name=ID 'as' args=Argument
;

AccessClassObject:
    instance_name=ID attribute=ClassAttribute
;

CreateMethodStatement:
    'function' name=ID 'returns' return_type=Type 'with' parameters=Parameter
        inner_function_statements*=InnerFunctionStatement
    'end function'
;   

IfStatement:
    if_block=IfBlock
    else_if_blocks*=ElseIfBlock
    (else_block=ElseBlock)?
    'end if'
;

IfBlock:
    'if' condition=Conditional 'then'
        inner_if_statements*=InnerIfStatement
;

ElseIfBlock:
    'else if' condition=Conditional 'then'
        inner_elif_statements*=InnerIfStatement
;

ElseBlock:
    'else then'
        inner_else_statements*=InnerIfStatement
;

InnerIfStatement:
    ReturnStatement | MainStatement
;

Conditional:
    Comparison | BOOL | VarRef 
;

ReturnStatement:
    'return' val=Expression
;

Operation:
    first=OperationOperand op=OperationOperator second=OperationOperand
;

Comparison:
    first=ComparisonOperand op=ComparisonOperator second=ComparisonOperand
;

Identifier:
   ListAccess | ObjectAttrRef | VarRef | AttrRef | ID 
;

ClassAttribute:
    CallFunction |  AttrRef | VarRef
;

Parameter:
    var=ID (',' var=ID)*
;

Argument:
    var=Variable (',' var=Variable)*
;

Expression:
   Operation | Comparison | LengthOf | List | ListAccess |  AccessClassObject | VarRef | AttrRef | STRING | NUMBER | BOOL | CallFunction
;

List:
    'list containing' '('(list_items=Item)?')' 
;

LengthOf:
    'length of' val=PossibleList
;

PossibleList:
    VarRef | ObjectAttrRef | AttrRef
;

Item:
    var=ValidListItem (',' var=ValidListItem)*
;

ValidListItem:
    ObjectAttrRef | VarRef | AttrRef | NUMBER | BOOL | STRING
;

ListAccess:
    'item' index=Index 'in list' name=ID
;

Index:
    VarRef | CallFunction | ObjectAttrRef | AttrRef |  INT
;

OperationOperand:
    ListAccess | AccessClassObject | VarRef | AttrRef | CallFunction | STRING | NUMBER
;

OperationOperator:
    'plus' | 'minus' | 'divided by' | 'times' | 'modulo' | 'to the power of'
;

ComparisonOperand:
    ListAccess | Operation | VarRef | AttrRef | AccessClassObject | CallFunction | STRING | NUMBER
;

ComparisonOperator:
    'is not less than or equal to' | 'is not greater than or equal to' | 'is not less than' | 'is not greater than' | 'is not equal to' | 
    'is less than or equal to' | 'is greater than or equal to' | 'is less than' | 'is greater than' | 'is equal to'
;

VarRef:
    'variable' name=ID
;

AttrRef:
    'attribute' name=ID
;

ObjectAttrRef:
    instance_name=ID 'attribute' attr=ID
;

Type:
    'number' | 'string' | 'boolean' | 'list' | 'nothing'
;

Variable:
   NUMBER | BOOL | STRING | ID
;


